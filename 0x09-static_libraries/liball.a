!<arch>
//                                              660       `
0-positive_or_negative.c/
0-puts_recursion.c/
100-prime_factor.c/
100-times_table.c/
101-print_number.c/
103-infinite_add.c/
10-print_triangle.c/
11-print_to_98.c/
2-largest_number.c/
2-print_alphabet.c/
2-print_alphabet_x10.c/
2-strlen_recursion.c/
3-print_alphabets.c/
3-print_numbers.c/
3-print_remaining_days.c/
4-pow_recursion.c/
4-print_alphabt.c/
4-print_most_numbers.c/
5-more_numbers.c/
5-print_numbers.c/
5-sqrt_recursion.c/
5-string_toupper.c/
6-is_prime_number.c/
6-print_numberz.c/
7-print_chessboard.c/
7-print_diagonal.c/
7-print_last_digit.c/
7-print_tebahpla.c/
8-print_base16.c/
8-print_diagsums.c/
8-print_square.c/
positive_or_negative.c/

0-isupper.c/    0           0     0     644     243       `
#include "main.h"
/**
* _isupper - to check if a character is uppercase
* @c: the character
* Return: 1 if upper and 0 if lower
*/
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

0-memset.c/     0           0     0     644     368       `
#include "main.h"
#include <string.h>
/**
* *_memset - to fill a memory with a constant block
* @s: a pointer to a char string
* @b: a char to be filled with
* @n: the number of times b is to be filled
* Return: the edited character
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = strlen(s);

	for (; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
/0              0           0     0     644     428       `
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
/**
* main - Entry point
* Description - To check if a number is postive or negative
* Return: always 0
*/
int main(void)

{
	int n;

	srand(time(0));
	n = rand() - RAND_MAX / 2;
	/* your code goes there */
	if (n > 0)
	{
		printf("%d is positive\n", n);
	}
	else if (n == 0)
	{
		printf("%d is zero\n", n);
	}
	else
	{
		printf("%d is negative\n", n);
	}
	return (0);
}
0-putchar.c/    0           0     0     644     148       `
#include <stdio.h>
#include "main.h"
/**
*main - a program that prints putchar
*Return:0
*/
int main(void)

{
	printf("_putchar\n");
	return (0);
}
/26             0           0     0     644     255       `
#include "main.h"
#include <string.h>
/**
* _puts_recursion - to print a string
* @s: the string to be printed
*/
void _puts_recursion(char *s)
{
	_putchar(s[0]);
	s[0]++;
	_puts_recursion(s - s[0]);
	if (s[0] == '\0')
	{
		_putchar('\n');
		return;
	}
}

0-reset_to_98.c/0           0     0     644     187       `
#include "main.h"
/**
* reset_to_98 - to add 98 to the variable in *n
* @*n: a pointer to n
* *@n: an integer
* Return: int *n
*/
void reset_to_98(int *n)
{
	int *new = n;

	*new = 98;
}

0-strcat.c/     0           0     0     644     345       `
#include "main.h"
#include <string.h>
/**
* *_strcat - to concatenate two strings toghether
* @dest: the destination string
* @src: the string to be concatenated
* Return: new string dest
*/
char *_strcat(char *dest, char *src)
{
	int i = strlen(dest);
	int j = 0;

	while (src[j] != '\0')
	{
		dest[i + j] = src[j];
		j++;
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     481       `
#include "main.h"
#include <ctype.h>
#include <stdlib.h>
/**
* _atoi - to change strings to integers
* @s: a character with strings
* Return: integer
*/
int _atoi(char *s)
{
	int res = 0;
	int sign = 1;
	int i = 0;

	while (s[i] !='\0')
	{
		if (isspace(s[i]))
		{
			i++;
			continue;
		}
		if (s[i] == '-' || s[i] == '+')
		{
			sign = (s[i] == '-') ? -1 : 1;
			i++;
		}
		if (!isdigit(s[i]))
		{
			break;
		}
		res = res * 10 + (s[i] - '0');
		i++;
	}
	return (res * sign);
}

/46             0           0     0     644     505       `
#include <stdio.h>
#include <math.h>
int is_prime(int num)
{
	int i;
	
	for (i = 2; 1 <= sqrt(num); i++)
	{
		if (num % i == 0)
		{
			return (0);
		}
	}
	return (1);
}
/**
* main - to print the prime factor of a number
* Return: 0
*/
int main(void)
{
	long int number = 6128524751433;
	long int largest_factor = 0;

	for (int i = 2; i <= sqrt(number); i++)
	{
		if (number % i == 0)
		{
			if (is_prime(i))
			{
				largest_factor = i;
			}
			while (number % i == 0)
			{
				number /= i;
			}
		}
	}
}

100-rot13.c/    0           0     0     644     236       `
#include"main.h"
/**
* *rot13 - to change a character to the one after 13 characters
* @a: the string to be changed
* Return: the edited character
*/
char *rot13(char *a)
{
	int i = 0;

	while (a[i] != '\0')
	{
		a[i] + 13;
		i++;
	}
}
/66             0           0     0     644     841       `
#include "main.h"

/**
 * print_times_table - prints the n times table, starting with 0
 * @n: number of the times table
 */
void print_times_table(int n)
{
	int i, j, k;

	if (n >= 0 && n <= 15)
	{
		for (i = 0; i <= n; i++)
		{
			for (j = 0; j <= n; j++)
			{
				k = j * i;
				if (j == 0)
				{
					_putchar(k + '0');
				} else if (k < 10 && j != 0)
				{
					_putchar(',');
					_putchar(' ');
					_putchar(' ');
					_putchar(' ');
					_putchar(k + '0');
				} else if (k >= 10 && k < 100)
				{
					_putchar(',');
					_putchar(' ');
					_putchar(' ');
					_putchar((k / 10) + '0');
					_putchar((k % 10) + '0');
				} else if (k >= 100)
				{
					_putchar(',');
					_putchar(' ');
					_putchar((k / 100) + '0');
					_putchar(((k / 10) % 10) + '0');
					_putchar((k % 10) + '0');
				}
			}
			_putchar('\n');
		}
	}
}

101-natural.c/  0           0     0     644     311       `
#include <stdio.h>

/**
 * main - Lists all the natural numbers below 1024 (excluded)
 *        that are multiples of 3 or 5.
 *
 * Return: Always 0.
 */
int main(void)
{
	int i, sum = 0;

	for (i = 0; i < 1024; i++)
	{
		if ((i % 3) == 0 || (i % 5) == 0)
			sum += i;
	}

	printf("%d\n", sum);

	return (0);
}

/85             0           0     0     644     137       `
#include "main.h"
/**
* print_number - to print an integer
* @n: the integer to be printed
*/
void print_number(int n)
{
	_putchar(n);
}

101-quote.c/    0           0     0     644     216       `
#include <stdio.h>
/**
* main - to print without using printf and puts
* Return: 1
*/
int main(void)
{
	FILE *f = stderr;

	fprintf(f, "and that piece of art is useful\" - Dora Korpar, 2015-10-19\n");
	return (1);
}
102-fibonacci.c/0           0     0     644     436       `
#include <stdio.h>

/**
 * main - Prints first 50 Fibonacci numbers, starting with 1 and 2,
 *        separated by a comma followed by a space.
 *
 * Return: Always 0.
 */
int main(void)
{
	int count;
	unsigned long fib1 = 0, fib2 = 1, sum;

	for (count = 0; count < 50; count++)
	{
		sum = fib1 + fib2;
		printf("%lu", sum);

		fib1 = fib2;
		fib2 = sum;

		if (count == 49)
			printf("\n");
		else
			printf(", ");
	}

	return (0);
}
102-magic.c/    0           0     0     644     430       `
#include <stdio.h>

int main(void)
{
  int n;
  int a[5];
  int *p;

  a[2] = 1024;
  p = &n;
  /*
   * write your line of code here...
   * Remember:
   * - you are not allowed to use a
   * - you are not allowed to modify p
   * - only one statement
   * - you are not allowed to code anything else than this line of code
   */
  *(p + 5) = 98;
  /* ...so that this prints 98\n */
  printf("a[2] = %d\n", a[2]);
  return (0);
}
103-fibonacci.c/0           0     0     644     404       `
#include <stdio.h>

/**
 * main - finds and prints the sum of the even-valued terms
 * followed by a new line
 * Return: Always 0 (Success)
 */
int main(void)
{
	int i;
	unsigned long int j, k, next, sum;

	j = 1;
	k = 2;
	sum = 0;

	for (i = 1; i <= 33; ++i)
	{
		if (j < 4000000 && (j % 2) == 0)
		{
			sum = sum + j;
		}
		next = j + k;
		j = k;
		k = next;
	}

	printf("%lu\n", sum);

	return (0);
}
/105            0           0     0     644     713       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
* *infinite_add - to add two numbers
* @n1: the first number
* @n2: the second number
* @r: the buffer to hold the result
* @size_r: the size of r
* Return: the added character
*/
char *infinite_add(char *n1, char *n2, char *r, int size_r)
{
	int carry = 0;
	int i = 0;
	int j = 0;
	int sum = 0;

	while (n1[i] != '\0' || n2[j] != '\0')
	{
		sum = carry + (n1[i] - '0') + (n2[j] - '0');
		if (i >= size_r - 1 || j >= size_r - 1 || sum > 9)
		{
			return (0);
		}
		r[i] = sum % 10 + '0';
		carry = sum / 10;
		i++;
		j++;
	}
	if (carry != 0)
	{
		if (i >= size_r - 1)
		{
			return (0);
		}
		r[i] = carry + '0';
		i++;
	}
	r[i] = '\0';
	return (r);
}

104-fibonacci.c/0           0     0     644     741       `
#include <stdio.h>

/**
 * main - fibonacci <3
 *
 * Purpose - no hardcode
 *
 * Return:  (Success)
 */

int main(void)
{
	unsigned long int i;
	unsigned long int bef = 1;
	unsigned long int aft = 2;
	unsigned long int l = 1000000000;
	unsigned long int bef1;
	unsigned long int bef2;
	unsigned long int aft1;
	unsigned long int aft2;

	printf("%lu", bef);

	for (i = 1; i < 91; i++)
	{
		printf(", %lu", aft);
		aft += bef;
		bef = aft - bef;
	}

	bef1 = (bef / l);
	bef2 = (bef % l);
	aft1 = (aft / l);
	aft2 = (aft % l);

	for (i = 92; i < 99; ++i)
	{
		printf(", %lu", aft1 + (aft2 / l));
		printf("%lu", aft2 % l);
		aft1 = aft1 + bef1;
		bef1 = aft1 - bef1;
		aft2 = aft2 + bef2;
		bef2 = aft2 - bef2;
	}
	printf("\n");
	return (0);
}

10-add.c/       0           0     0     644     219       `
#include "main.h"

/**
 * add - adds two integers and returns the result
 * @a: int to be added to b
 * @b: int to be added to a
 * Return: sum of a and b
 */
int add(int a, int b)
{
	int c;

	c = a + b;
	return (c);
}

/125            0           0     0     644     273       `
#include "main.h"
/**
* print_triangle - to print a triangle
* @size: the size of the triangle
*/
void print_triangle(int size)
{
	if (size > 0)
	{
		int a = size - 1;

		while (a >= 0)
		{
			_putchar('_');
			a--;
		}
		_putchar('\n');
	}
	else
	{
		_putchar('\n');
	}
}

/146            0           0     0     644     482       `
#include <stdio.h>
#include "main.h"

/**
 * print_to_98 - prints all natural numbers from n to 98,
 * followed by a new line
 * @n: print from this number
 */
void print_to_98(int n)
{
	int i, j;

	if (n <= 98)
	{
		for (i = n; i <= 98; i++)
		{
			if (i != 98)
				printf("%d, ", i);
			else if (i == 98)
				printf("%d\n", i);
		}
	} else if (n >= 98)
	{
		for (j = n; j >= 98; j--)
		{
			if (j != 98)
				printf("%d, ", j);
			else if (j == 98)
				printf("%d\n", j);
		}
	}
}
1-alphabet.c/   0           0     0     644     184       `
#include "main.h"
/**
* print_alphabet - to print alphabets
* Return:null
*/
void print_alphabet(void)
{
	int i = 97;

	while (i <= 122)
	{
		_putchar(i);
		i++;
	}
	_putchar('\n');
}
1-isdigit.c/    0           0     0     644     265       `
#include "main.h"
/**
* _isdigit - to check if a character is digit
* @c: the character number on ascii table
* Return: 1 if digit and 0 if non-digit
*/
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

1-last_digit.c/ 0           0     0     644     517       `
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
/**
*main - Entry point
*Description - print the last digit of the variable n
*Return: Always 0
*/
int main(void)

{
	int n;
	int ld;

	srand(time(0));
	n = rand() - RAND_MAX / 2;
	ld = n % 10;
	if (ld > 5)
	{
		printf("Last digit of %d is %d and is greater than 5\n", n, ld);
	}
	else if (ld == 0)
	{
		printf("Last digit of %d is %d and is 0\n", n, ld);
	}
	else
	{
		printf("Last digit of %d is %d and is less than 6 and not 0\n", n, ld);
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     487       `
#include "main.h"
#include <string.h>
/**
* *_memcpy - to copy one string to another
* @dest: the destination string
* @src: the string to be copied
* @n: the number of times src is to be copied into dest
* Return: the edited character
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;
	unsigned int j = 0;

	if (src == NULL)
	{
		return (dest);
	}
	else
	{
		while (i < n && src[j] != '\0')
		{
			dest[i] = src[j];
			i++;
			j++;
		}
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     456       `
#include "main.h"
#include <string.h>
/**
* *_strncat - to concacate n number of strings to destination
* @dest: the destination string
* @src: the concacated string
* @n: an integer pointing how many characters would be concacated
* Return: destination string
*/
char *_strncat(char *dest, char *src, int n)
{
	int i = strlen(dest);
	int j = 0;

	while (j < n && src[j] != '\0')
	{
		dest[i + j] = src[j];
		j++;
	}
	dest[i + j] = '\0';
	return (dest);
}
1-swap.c/       0           0     0     644     204       `
#include "main.h"
/**
* swap_int - to swap two integers
* @a: an integer
* @b: an integer
*/
void swap_int(int *a, int *b)
{
	int *one = a;
	int *two = b;
	int temp = *one;

	*one = *two;
	*two = temp;
}
/164            0           0     0     644     343       `
#include "main.h"
/**
* largest_number - returns the largest of 3 numbers
* @a: first integer
* @b: second integer
* @c: third integer
* Return: largest
*/

int largest_number(int a, int b, int c)
{
	int largest;

	if (a > b && a > c)
	{
		largest = a;

	}
	else if (b > c)
	{
		largest = b;
	}
	else
	{
		largest = c;
	}
	return (largest);
}

2-mul.c/        0           0     0     644     192       `
#include "main.h"
/**
* mul - to multiply two integers
* @a: first integer
* @b: second integer
* Return: the multiplied integer
*/
int mul(int a, int b)
{
	int c;

	c = a * b;
	return (c);
}
/184            0           0     0     644     218       `
#include <stdio.h>
/**
*main - Entry point
*Description - puts alphabets in lower cases
*Return: always 0
*/

int main(void)
{
	int a = 97;

	while (a <= 122)
	{
		putchar(a);
		a++;
	}
		putchar('\n');
	return (0);
}
/204            0           0     0     644     246       `
#include "main.h"
/**
*print_alphabet_x10 - print alphabets 10 times
*Return: void
*/
void print_alphabet_x10(void)
{
	int b = 0;

	while (b < 10)
	{
		int c = 97;

		while (c < 123)
		{
			_putchar(c);
			c++;
		}

		_putchar('\n');
		b++;
	}
}
2-strchr.c/     0           0     0     644     407       `
#include "main.h"
#include <string.h>
/**
* *_strchr - to find a character in a string
* @s: the string to be searched
* @C: the character to be searches for
* Return: a pointer to the character
*/
char *_strchr(char *s, char C)
{
	int i = 0;
	char *p;

	while (s[i] != '\0')
	{
		if (s[i] == C)
		{
			p = &s[i];
		}
		else if (s[i] == '\0' && s[i] != C)
		{
			return (NULL);
		}
		i++;
	}
	return (p);
}

2-strlen.c/     0           0     0     644     191       `
#include "main.h"
/**
* _strlen - to print the length of a string
* @s: a character
* Return: integer
*/
int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}
	return (i);
}

/228            0           0     0     644     258       `
#include "main.h"
/**
* _strlen_recursion - to print the length of a string
* @s: the string to be counted
* Return: the number of characters in a string
*/
int _strlen_recursion(char *s)
{
	if (*s != '\0')
	{
		i++;
	}
	return (i + _strlen_recursion(s));
}
2-strncpy.c/    0           0     0     644     398       `
#include "main.h"
#include <string.h>
/**
* *_strncpy - copies one string to another
* @dest: the destination string
* @src: the string to be copied
* @n: number of lines to be copied
* Return: dest string
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-convert_day.c/0           0     0     644     1021      `
#include "main.h"

/**
* convert_day - converts day of month to day of year, without accounting
* for leap year
* @month: month in number format
* @day: day of month
* Return: day of year
*/

int convert_day(int month, int day)
{
    switch (month)
    {
        case 2:
            day = 31 + day;
            break;
        case 3:
            day = 59 + day;
            break;
        case 4:
            day = 90 + day;
            break;
        case 5:
            day = 120 + day;
            break;
        case 6:
            day = 151 + day;
            break;
        case 7:
            day = 181 + day;
            break;
        case 8:
            day = 212 + day;
            break;
        case 9:
            day = 243 + day;
            break;
        case 10:
            day = 273 + day;
            break;
        case 11:
            day = 304 + day;
            break;
        case 12:
            day = 334 + day;
            break;
        default:
            break;
    }
    return (day);
}

3-factorial.c/  0           0     0     644     272       `
#include "main.h"
/**
* factorial - to print the factorial of an integer
* @n: the number given to factorial
* Return: the factorised number
*/
int factorial(int n)
{
	if (n < 0)
	{
		return (-1);
	}
	else if (n == 0)
	{
		return (1);
	}
	return (n * factorial(n - 1));
}
3-islower.c/    0           0     0     644     210       `
#include "main.h"
/**
* _islower - to check for a lower case
 *@c: a character
* Return: int
*/
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar ('\n');
}
3-main_a.c/     0           0     0     644     423       `
#include <stdio.h>
#include "main.h"

/**
* main - takes a date and prints how many days are left in the year, taking
* leap years into account
* Return: 0
*/

int main(void)
{
    int month;
    int day;
    int year;

    month = 4;
    day = 01;
    year = 1997;

    printf("Date: %02d/%02d/%04d\n", month, day, year);

    day = convert_day(month, day);

    print_remaining_days(month, day, year);

    return (0);
}

/250            0           0     0     644     278       `
#include <stdio.h>
/**
*main - Entry point
*Description - To print lowercase and uppercase letters
*Return: 0
*/
int main(void)
{
	int a = 97;
	int b = 65;

	while (a <= 122)
	{
		putchar(a);
		a++;
	}

	while (b <= 90)
	{
		putchar(b);
		b++;
	}
	putchar('\n');
	return (0);
}
/271            0           0     0     644     176       `
#include "main.h"
/**
* print_numbers - to print from number 0 to 9
*/
void print_numbers(void)
{
	int a  = 48;

	while (a < 58)
	{
		_putchar(a);
		a++;
	}
	_putchar('\n');
}
/290            0           0     0     644     726       `
#include <stdio.h>
#include "main.h"

/**
* print_remaining_days - takes a date and prints how many days are
* left in the year, taking leap years into account
* @month: month in number format
* @day: day of month
* @year: year
* Return: void
*/

void print_remaining_days(int month, int day, int year)
{
	if (year % 4 == 0 || (year % 400 == 0 && year % 100 == 0))
	{
		if (month > 2 && day >= 60)
		{
			day++;
		}

	printf("Day of the year: %d\n", day);
	printf("Remaining days: %d\n", 366 - day);
	}
	else
	{
		if (month == 2 && day == 60)
		{
			printf("Invalid date: %02d/%02d/%04d\n", month, day - 31, year);
		}
		else
		{
			printf("Day of the year: %d\n", day);
			printf("Remaining days: %d\n", 365 - day);
		}
	}
}
3-puts.c/       0           0     0     644     161       `
#include "main.h"
#include <stdio.h>
/**
* _puts - to print a string
* @str: a string to be printed on stdout
*/
void _puts(char *str)
{
	printf("%s\n", str);
}

3-strcmp.c/     0           0     0     644     440       `
#include "main.h"
#include <string.h>
/**
* _strcmp - to compare two strings
* @s1: first string
* @s2: second string
* Return: an integer
*/
int _strcmp(char *s1, char *s2)
{
	int i = 0;
	int j = 0;
	int a = strlen(s1) - 1;
	int b = strlen(s2) - 1;

	while (s1[i] != '\0' && s2[j] != '\0')
	{
		if (s1[i] > s2[j] || a > b)
		{
			return (-13);
		}
		else if (s1[i] < s2[j] || a < b)
		{
			return (13);
		}
		i++;
		j++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     430       `
#include "main.h"
#include <string.h>
/**
* _strspn - to check for the number of times char accept appears in str
* @s: the initial char to be checked
* @accept: the char containing the strings to be used
* Return: the number of times accept occurs in str
*/
unsigned int _strspn(char *s, char *accept)
{
	int i = 0;
	unsigned int j = 0;
	
	while (s[i] != '\0')
	{
		if (*accept == *s)
		{
			j = *s;
		}
		i++;
	}
	return (j);
}
4-isalpha.c/    0           0     0     644     242       `
#include "main.h"
/**
* _isalpha - to check for alphabets
* @c: alphabetic character
* Return: null
*/
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}
/316            0           0     0     644     350       `
#include "main.h"
#include <math.h>
/**
* _pow_recursion - to raise int x to the power of int y
* @x: the integer to be acted upon
* @y: the power to be raised to
* Return: the integer x raised to y
*/
int _pow_recursion(int x, int y)
{
	if (y < 0)
	{
		return (-1);
	}
	else if (y == 0)
	{
		return (1);
	}
	return (x * _pow_recursion(x, y - 1));
}
/335            0           0     0     644     277       `
#include <stdio.h>
/**
*main - Entry point
*Description - to print lowercase letter except q and e
*Return: 0
*/
int main(void)
{
	int a = 97;

	while (a <= 122)
	{
		if (a == 101 || a == 113)
		{
			a++;
			continue;
		}
		putchar(a);
		a++;
	}
	putchar('\n');
	return (0);
}

/354            0           0     0     644     248       `
#include "main.h"
/**
* print_most_numbers - to print all numbers except 2 and 4
*/
void print_most_numbers(void)
{
	int a = 48;

	while (a < 58)
	{
		if (a == 50 || a == 52)
		{
			a++;
			continue;
		}
		_putchar(a);
		a++;
	}
	_putchar('\n');
}
4-print_rev.c/  0           0     0     644     234       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
*  print_rev - print strings in reverse
* @s: a string
*/
void print_rev(char *s)
{
	int i = strlen(s) - 1;

	while (i >= 0)
	{
		putchar(s[i]);
		i--;
	}
	putchar('\n');
}
4-puts.c/       0           0     0     644     179       `
#include <stdio.h>
/**
*main - Entry point
*Description - programming
*Return: 0
*/
int main(void)
{
	puts("\"Programming is like building a multilingual puzzle");
	return (0);
}

4-rev_array.c/  0           0     0     644     349       `
#include "main.h"
/**
* reverse_array - to reverse the content of an array
* @a: the array
* @n: the number of characters in a
* @n number of elements in the array
*/
void reverse_array(int *a, int n)
{
	int start = 0;
	int end = n - 1;

	while (start < end)
	{
		int temp = a[start];

		a[start] = a[end];
		a[end] = temp;
		start++;
		end--;
	}
}

4-strpbrk.c/    0           0     0     644     499       `
#include "main.h"
#include <string.h>
/**
* _strpbrk - to search a string for any set of bytes
* @s: the string to be searched
* @accept: the byte to find in s
* Return: a pointer to the byte
*/
char *_strpbrk(char *s, char *accept)
{
	int i = 0;
	int j = 0;
	char *p;

	while (s[i] != '\0')
	{
		while (accept[j] != '\0')
		{
			if (*s == *accept)
			{
				p = &s[i - 1];
			}
			else
			{
				j++;
				continue;
			}
			j++;
		}
		i++;
	}
	return (p);
	if (*s != *accept)
	{
		return (NULL);
	}
}

/378            0           0     0     644     290       `
#include "main.h"
/**
* more_numbers - to print from number 0 to 14
*/
void more_numbers(void)
{
	int a = 0;

	while (a < 10)
	{
		int b = 0;

		while (b <= 14)
		{
			if (b > 9)
			{
				_putchar('0' + (b / 10));
			}
			_putchar('0' + (b % 10));
			b++;
		}
		_putchar('\n');
		a++;
	}
}
5-printf.c/     0           0     0     644     183       `
#include <stdio.h>
/**
*main - Entry point
*Description - printf
*Return: 0
*/

int main(void)
{
	printf("with proper grammar, but the outcome is a piece of art,\n");
	return (0);
	}

/396            0           0     0     644     179       `
#include <stdio.h>
/**
* main - To print base 10 numbers
* Return: 0
*/
int main(void)
{
	int a;

	for (a = 0; a <= 9; a++)
	{
		printf("%d", a);
	}
	printf("\n");
	return (0);
}

5-rev_string.c/ 0           0     0     644     277       `
#include "main.h"
#include <string.h>
/**
* rev_string - to reverse a string
* @s: a string to be reversed
* Return: void
*/
void rev_string(char *s)
{
	int i = 0;
	int j = strlen(s) - 1;

	while (i < j)
	{
		char temp = s[i];

		s[i] = s[j];
		s[j] = temp;
		i++;
		j--;
	}
}

5-sign.c/       0           0     0     644     292       `
#include "main.h"
/**
* print_sign - to print the sign of a number
* @n: an integer
* Return: int
*/
int print_sign(int n)
{
	if (n > 0)
	{
		_putchar('+');
		return (1);
	}
	else if (n == 0)
	{
		_putchar('0');
		return (0);
	}
	else
	{
		_putchar('-');
		return (-1);
	}
	_putchar('\n');
}
/415            0           0     0     644     241       `
#include "main.h"
/**
* _sqrt_recursion - to print the squareroot of an integer
* @n: the integer to be divided
* Return: square root of n
*/
int _sqrt_recursion(int n)
{
	int i = n / 2;

	if (n % i != 0)
	{
		return (-1);
	}
	return (i);
}

/435            0           0     0     644     293       `
#include "main.h"
#include <ctype.h>
/**
* *string_toupper - to change all lowercase character to upper cases
* @a: the string to be edited
* Return: the edited character
*/
char *string_toupper(char *a)
{
	int b = 0;

	while (a[b] != '\0')
	{
		a[b] = toupper(a[b]);
		b++;
	}
	return (a);
}

6-abs.c/        0           0     0     644     190       `
#include "main.h"
/**
* _abs - to print absolute value
* @a: an integer
* Return: int
*/
int _abs(int a)
{
	if (a >= 0)
	{
		return (a);
	}
	else
	{
		return (a * -1);
	}
	_putchar('\n');
}
6-cap_string.c/ 0           0     0     644     802       `
#include "main.h"
#include <ctype.h>
/**
* *cap_string - to capitalize the words of a string
* @a: the string to be edited
* Return: the edited character
*/
char *cap_string(char *a)
{
	int i = 0;

	while (a[i] != '\0')
	{
		if (a[i] == a[0] || a[i - 1] == ' ')
		{
			a[i] = toupper(a[i]);
		}
		else if (a[i - 1] == '\n' || a[i - 1] == '\t')
		{
			a[i] = toupper(a[i]);
		}
		else if (a[i - 1] == ';' || a[i - 1] == '.')
		{
			a[i] = toupper(a[i]);
		}
		else if (a[i - 1] == '!' || a[i - 1] == '?')
		{
			a[i] = toupper(a[i]);
		}
		else if (a[i - 1] == '"' || a[i - 1] == ',')
		{
			a[i] = toupper(a[i]);
		}
		else if (a[i - 1] == '(' || a[i - 1] == ')')
		{
			a[i] = toupper(a[i]);
		}
		else if (a[i - 1] == '{' || a[i - 1] == '}')
		{
			a[i] = toupper(a[i]);
		}
		i++;
	}
	return (a);
}
/455            0           0     0     644     323       `
#include "main.h"
/**
* is_prime_number - to check if a number is a prime number
* @n: the number to be checked
* Return: i if n is a prime number and 0 if n is not prime number
*/
int is_prime_number(int n)
{
	if (n <= 1 || n % 2 == 0)
	{
		return (0);
	}
	else if (n % is_prime_number(n - 1) == 0);
	{
		return (1);
	}
}

6-print_line.c/ 0           0     0     644     236       `
#include "main.h"
/**
* print_line - to print a line n times
* @n: the number of times n is to be printed
*/
void print_line(int n)
{
	if (n > 0)
	{
		int a = 1;

		while (a <= n)
		{
			_putchar('_');
			a++;
		}
	}
	_putchar('\n');
}
/476            0           0     0     644     212       `
#include <stdio.h>
/**
*main - Entry point
*Description - print numbers 0-9 using putchar
*Return: 0
*/
int main(void)
{
	int a = 48;

	while (a <= 57)
		{
		putchar(a);
		a++;
		}
	putchar('\n');
	return (0);
}
6-puts2.c/      0           0     0     644     269       `
#include "main.h"
#include <stdio.h>
/**
* puts2 - to prints the first character and jump the next
* @str: the string given
*/
void puts2(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		if (i % 2 == 0)
		{
			printf("%c", str[i]);
		}
		i++;
	}
	printf("\n");
}

6-size.c/       0           0     0     644     426       `
#include <stdio.h>
/**
*main - Entry point
*Description - size,territory
*Return:0
*/
int main(void)

{
	printf("Size of a char: %ld byte(s)\n", sizeof(char));
	printf("Size of an int: %ld byte(s)\n", sizeof(int));
	printf("Size of a long int: %ld byte(s)\n", sizeof(long int));
	printf("Size of a long long int: %ld byte(s)\n", sizeof(long long int));
	printf("Size of a float: %ld byte(s)\n", sizeof(float));
	return (0);
}
7-leet.c/       0           0     0     644     283       `
#include "main.h"
#include <string.h>
/**
* *leet - to change given letters to numbers
* @s: the given string
* Return: the edited string
*/
char *leet(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		if (s[i] == 'A' || s[i] == 'a')
		{
			s[i] = '4';
		}
		i++;
	}
	return (s);
}

/495            0           0     0     644     293       `
#include <stdio.h>
#include "main.h"
/**
* print_chessboard - to print a chess board
* @a: an array with 8 rows and 8 columns
*/
void print_chessboard(char (*a)[8])
{
	int i;
	int j;

	for (i = 0; i < 8; i++)
	{
		for (j = 0; j < 8; j++)
		{
			printf("%c", a[i][j]);
		}
		printf("\n");
	}
}

/517            0           0     0     644     359       `
#include "main.h"
/**
* print_diagonal - to prints lines in a diagonal pattern
* @n: the numbr of times n is to be printed
*/
void print_diagonal(int n)
{
	if (n > 0)
	{
		int a = 0;

		while (a < n)
		{
			int b = 0;

			while (b < a)
			{
				_putchar(' ');
				b++;
			}
			_putchar('\\');
			_putchar('\n');
			a++;
		}
	}
	else
	{
		_putchar('\n');
	}
}

/537            0           0     0     644     298       `
#include "main.h"

/**
 * print_last_digit - prints the last digit of a number
 * @n: the int to extract the last digit from
 * Return: value of the last digit
 */
int print_last_digit(int n)
{
	int a;

	if (n < 0)
	n = -n;

	a = n % 10;

	if (a < 0)
		a = -a;

	_putchar(a + '0');

	return (a);
}
/559            0           0     0     644     208       `
#include <stdio.h>
/**
*main - Entry point
*Description - Yo print alphabet in reverse
*Return: 0
*/
int main(void)
{
	int a = 122;

	while (a >= 97)
	{
		putchar(a);
		a--;
	}
	putchar('\n');
	return (0);
}
7-puts_half.c/  0           0     0     644     343       `
#include "main.h"
#include <stdio.h>
#include <string.h>
/**
* puts_half - to input the other half of a string
* @str: string given
*/
void puts_half(char *str)
{
	int i = strlen(str);
	int j;

	if (i % 2 == 1)
	{
		j = (i + 1) / 2;
	}
	else if (i % 2 == 0)
	{
		j = i / 2;
	}
	while (j < i)
	{
		_putchar(str[j]);
		j++;
	}
	putchar('\n');
}

8-24_hours.c/   0           0     0     644     344       `
#include "main.h"
/**
* jack_bauer - to print all the minutes of his life
*/
void jack_bauer(void)
{
	int i = 0;

	while (i < 24)
	{
		int j = 0;

		while (j < 60)
		{
			_putchar((i / 10) + '0');
			_putchar((i % 10) + '0');
			_putchar(':');
			_putchar((j / 10) + '0');
			_putchar((j % 10) + '0');
			_putchar('\n');
			j++;
		}
	i++;
	}
}
8-print_array.c/0           0     0     644     302       `
#include "main.h"
#include <stdio.h>
/**
* print_array - to print the members of an array
* @a: a pointer to integer
* @n: an integer
*/
void print_array(int *a, int n)
{
	int i = 0;

	while (i < n - 1)
	{
		printf("%d, ", a[i]);
		i++;
	}
	if (i == n - 1)
	{
		printf("%d", a[i]);
	}
	printf("\n");
}
/579            0           0     0     644     257       `
#include <stdio.h>
/**
*main - Entry point
*Description - Print base 16 numbers
*Return: 0
*/
int main(void)
{
	int n;
	int m;

	for (n = 48; n <= 57; n++)
	{
		putchar(n);
	}
	for (m = 97; m <= 102; m++)
	{
		putchar(m);
	}
	putchar ('\n');
	return (0);
}

/597            0           0     0     644     503       `
#include "main.h"
#include <stddef.h>
#include <stdio.h>
/**
* print_diagsums - to print the sum of the diagonals of a square matrix of integers
* @a: the two-dimensional array
* @size: the numbers of digits to be added
*/
void print_diagsums(int *a, int size)
{
	int i = 0;
	int j = size - 1;
	int k = 0;
	int l = size -1;
	int c = 0;
	int d = 0;

	while (i < size && j >= 0)
	{
		d = *a + d;
		i++;
		j--;
	}
	while (l >= 0 && k < size)
	{
		c = *a + c;
		l--;
		k++;
	}
	printf ("%d, %d\n", d, c);
}

/617            0           0     0     644     311       `
#include "main.h"
/**
* print_square - to print a square using #
* @size: the size of the square
*/
void print_square(int size)
{
	if (size > 0)
	{
		int a, b;

		for (a = 0; a < size; a++)
		{
			for (b = 0; b < size; b++)
			{
				_putchar('#');
			}
			_putchar('\n');
		}
	}
	else
	{
		_putchar('\n');
	}
}

9-fizz_buzz.c/  0           0     0     644     438       `
#include <stdio.h>
/**
* main - to print numbers 1 to 100
* Return: 0
*/
int main(void)
{
	int a = 1;

	while (a < 100)
	{
		if (a % 15 == 0)
		{
			printf("FizzBuzz ");
			a++;
			continue;
		}
		else if (a % 5 == 0)
		{
			printf("Buzz ");
			a++;
			continue;
		}
		else if (a % 3 == 0)
		{
			printf("Fizz ");
			a++;
			continue;
		}
		printf("%d ", a);
		a++;
	}
	if (a == 100)
	{
		printf("Buzz");
	}
	printf("\n");
	return (0);
}
9-print_comb.c/ 0           0     0     644     276       `
#include <stdio.h>
/**
*main - Entry point
*Description - to print single digits and comma
*Return: 0
*/
int main(void)
{
	int a;

	for (a = 48; a <= 57; a++)
	{
		putchar(a);
		if (a == 57)
		{
			break;
		}
		putchar(',');
		putchar(' ');
	}
	putchar ('\n');
	return (0);
}
9-strcpy.c/     0           0     0     644     330       `
#include "main.h"
#include <string.h>
/**
* *_strcpy - copy one string into another
* @dest: the destination string
* @src: the main string
* Return: char
*/
char *_strcpy(char *dest, char *src)
{
	char *dest_ptr = dest;

	while (*src != '\0')
	{
		*dest_ptr = *src;
		dest_ptr++;
		src++;
	}
	*dest_ptr = '\0';
	return (dest);
}
9-times_table.c/0           0     0     644     527       `
#include "main.h"
/**
 * times_table - prints the 9 times table, starting with 0
 */
void times_table(void)
{
	int i;

	for (i = 0; i < 10; i++)
	{
		int j;

		for (j = 0; j < 10; j++)
		{
			int k = j * i;

			if (j == 0)
			{
				_putchar(k + '0');
			}
			if (k < 10 && j != 0)
			{
				_putchar(',');
				_putchar(' ');
				_putchar(' ');
				_putchar(k + '0');
			}
			else if (k >= 10)
			{
				_putchar(',');
				_putchar(' ');
				_putchar((k / 10) + '0');
				_putchar((k % 10) + '0');
			}
		}
		_putchar('\n');
	}
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
/635            0           0     0     644     428       `
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
/**
* main - Entry point
* Description - To check if a number is postive or negative
* Return: always 0
*/
int main(void)

{
	int n;

	srand(time(0));
	n = rand() - RAND_MAX / 2;
	/* your code goes there */
	if (n > 0)
	{
		printf("%d is positive\n", n);
	}
	else if (n == 0)
	{
		printf("%d is zero\n", n);
	}
	else
	{
		printf("%d is negative\n", n);
	}
	return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

